@startuml
skinparam linetype ortho
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T1
skinparam classBackgroundColor LOGIC_COLOR_T1

skinparam {
classBackgroundColor<<HiddenOutside>> #FFFFFF
classBorderColor<<HiddenOutside>> #FFFFFF
classFontColor<<HiddenOutside>> #FFFFFF
classStereotypeFontColor<<HiddenOutside>> #FFFFFF
}

package Logic {

package Parser {
Interface Parser <<Interface>>
Class SerenityParser
Class XYZCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class XYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model{
Class HiddenModel<<HiddenOutside>> #FFFFFF
}

Class HiddenOutside<<HiddenOutside>> #FFFFFF
HiddenOutside ..> Logic

LogicManager .up.|> Logic
LogicManager -->"1" SerenityParser
SerenityParser ..> XYZCommandParser: creates >

XYZCommandParser .right.> XYZCommand : creates >
XYZCommandParser ..|> Parser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
LogicManager .right.> Command : executes >

LogicManager -left-> Model
Command .right.> Model
note bottom of XYZCommand: XYZCommand =\nAddGrpCommand,\nEditQnCommand, etc

Logic .> CommandResult
LogicManager .down.> CommandResult
Command .up.> CommandResult
CommandResult -[hidden]-> Parser
@enduml
